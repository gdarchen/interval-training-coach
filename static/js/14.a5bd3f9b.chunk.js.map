{"version":3,"sources":["common/interval-edition-modal/IntervalEditionModal.jsx"],"names":["window","jp","useStyles","makeStyles","theme","modalContent","display","justifyContent","flexDirection","borderColor","palette","secondary","light","durationTitle","marginTop","marginBottom","durationError","margin","fontSize","textAlign","fontFamily","fontWeight","lineHeight","letterSpacing","marginLeft","marginRight","color","connect","state","intervalToEdit","trainingReducer","trainingInCreation","dispatch","saveTrainingInCreation","training","saveTrainingInCreationAction","isModalOpened","handleCloseModal","classes","useState","description","setDescription","duration","setDuration","isDescriptionInError","setIsDescriptionInError","isDurationInError","setIsDurationInError","useEffect","open","onClose","className","descriptionTitle","variant","label","value","onChange","e","target","error","helperText","d","initialDuration","hours","minutes","seconds","maxHours","onClick","wasErrorSet","length","isEqual","apply","id"],"mappings":"kUAeAA,OAAOC,GAAKA,IAEZ,IAAMC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,aAAc,CACZC,QAAS,OACTC,eAAgB,SAChBC,cAAe,SACf,oBAAqB,CACnBC,YAAaL,EAAMM,QAAQC,UAAUC,QAGzCC,cAAe,CACbC,UAAW,GACXC,aAAc,GAEhBC,cAAe,CACbC,OAAQ,EACRC,SAAU,UACVJ,UAAW,EACXK,UAAW,OACXC,WAAY,6CACZC,WAAY,IACZC,WAAY,KACZC,cAAe,YACfC,WAAY,GACZC,YAAa,GACbC,MAAO,eAuIIC,uBAVS,SAAAC,GAAK,MAAK,CAChCC,eAAgBD,EAAME,gBAAgBD,eACtCE,mBAAoBH,EAAME,gBAAgBC,uBAGjB,SAAAC,GAAQ,MAAK,CACtCC,uBAAwB,SAAAC,GAAQ,OAC9BF,EAASG,YAA6BD,QAG3BP,EAnIc,SAAC,GAMvB,IALLS,EAKI,EALJA,cACAC,EAII,EAJJA,iBACAR,EAGI,EAHJA,eACAE,EAEI,EAFJA,mBACAE,EACI,EADJA,uBAEMK,EAAUpC,IADZ,EAEkCqC,mBACnCV,GAAkBA,EAAeW,aAAgB,IAHhD,mBAEGA,EAFH,KAEgBC,EAFhB,OAK4BF,qBAL5B,mBAKGG,EALH,KAKaC,EALb,OAMoDJ,oBAAS,GAN7D,mBAMGK,EANH,KAMyBC,EANzB,OAO8CN,oBAAS,GAPvD,mBAOGO,EAPH,KAOsBC,EAPtB,KASJC,qBAAU,WACJnB,GAAkBA,EAAeW,aACnCC,EAAeZ,EAAeW,aAG5BX,GAAkBA,EAAea,UACnCC,EAAYd,EAAea,YAE5B,CAACb,IAiDJ,OACE,kBAAC,IAAD,CAAQoB,KAAMb,EAAec,QAASb,GACpC,kBAAC,IAAD,yBACA,kBAAC,IAAD,KACE,yBAAKc,UAAWb,EAAQjC,cACtB,kBAAC,IAAD,CAAmB8C,UAAWb,EAAQc,kBAAtC,wBAGA,kBAAC,IAAD,CACEC,QAAQ,SACRC,MAAM,cACN5B,MAAM,YACN6B,MAAOf,EACPgB,SA5DkB,SAAAC,GAC1BhB,EAAegB,EAAEC,OAAOH,QA4DhBI,MAAOf,EACPgB,WACEhB,EACI,wDACA,OAIR,kBAAC,IAAD,CAAmBO,UAAWb,EAAQzB,eAAtC,qBAGCiC,GACC,uBAAGK,UAAWb,EAAQtB,eAAtB,oBAEF,kBAAC,IAAD,CACEwC,SAxEe,SAAAK,GACvBlB,EAAYkB,IAwEJC,gBACEjC,GAAkBA,EAAea,SAC7Bb,EAAea,SACf,CAAEqB,MAAO,EAAGC,QAAS,EAAGC,QAAS,GAEvCC,SAAU,MAIhB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,QA9CG,WACf1B,EAAe,IACfE,EAAY,MACZN,MA2CI,UACA,kBAAC,IAAD,CAAQ8B,QAhFa,WACzBtB,GAAwB,GACxBE,GAAqB,GACrB,IAAIqB,GAAc,IAEb5B,GAAeA,EAAY6B,OAAS,OACvCD,GAAc,EACdvB,GAAwB,IAGrBH,IAAY4B,IAAQ5B,EAAU,CAAEqB,MAAO,EAAGC,QAAS,EAAGC,QAAS,MAClEG,GAAc,EACdrB,GAAqB,IAGlBqB,IAEHnE,IAAGsE,MACDxC,EADF,8BAEyBF,EAAe2C,GAFxC,QAGE,SAAAjB,GAAK,MAAK,CACRiB,GAAI3C,EAAe2C,GACnBhC,cACAE,eAGJT,EAAuB,eAAKF,IAC5BY,EAAY,MACZF,EAAe,IACfJ,MAmDuCX,MAAM,aAA3C","file":"static/js/14.a5bd3f9b.chunk.js","sourcesContent":["import Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport jp from \"jsonpath\";\nimport isEqual from \"lodash/isEqual\";\nimport React, { useState, useEffect } from \"react\";\nimport DurationPicker from \"react-duration-picker\";\nimport { connect } from \"react-redux\";\nimport { saveTrainingInCreationAction } from \"../../redux/actions/trainingActions\";\n\nwindow.jp = jp;\n\nconst useStyles = makeStyles(theme => ({\n  modalContent: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    \"& hr.rdp-reticule\": {\n      borderColor: theme.palette.secondary.light\n    }\n  },\n  durationTitle: {\n    marginTop: 30,\n    marginBottom: 0\n  },\n  durationError: {\n    margin: 0,\n    fontSize: \"0.75rem\",\n    marginTop: 3,\n    textAlign: \"left\",\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    fontWeight: 400,\n    lineHeight: 1.66,\n    letterSpacing: \"0.03333em\",\n    marginLeft: 14,\n    marginRight: 14,\n    color: \"#f44336\"\n  }\n}));\n\nconst IntervalEditionModal = ({\n  isModalOpened,\n  handleCloseModal,\n  intervalToEdit,\n  trainingInCreation,\n  saveTrainingInCreation\n}) => {\n  const classes = useStyles();\n  const [description, setDescription] = useState(\n    (intervalToEdit && intervalToEdit.description) || \"\"\n  );\n  const [duration, setDuration] = useState();\n  const [isDescriptionInError, setIsDescriptionInError] = useState(false);\n  const [isDurationInError, setIsDurationInError] = useState(false);\n\n  useEffect(() => {\n    if (intervalToEdit && intervalToEdit.description) {\n      setDescription(intervalToEdit.description);\n    }\n\n    if (intervalToEdit && intervalToEdit.duration) {\n      setDuration(intervalToEdit.duration);\n    }\n  }, [intervalToEdit]);\n\n  const onDescriptionChange = e => {\n    setDescription(e.target.value);\n  };\n\n  const onDurationChange = d => {\n    setDuration(d);\n  };\n\n  const onValidateInterval = () => {\n    setIsDescriptionInError(false);\n    setIsDurationInError(false);\n    let wasErrorSet = false;\n\n    if (!description || description.length > 100) {\n      wasErrorSet = true;\n      setIsDescriptionInError(true);\n    }\n\n    if (!duration || isEqual(duration, { hours: 0, minutes: 0, seconds: 0 })) {\n      wasErrorSet = true;\n      setIsDurationInError(true);\n    }\n\n    if (!wasErrorSet) {\n      // Updates the trainingInCreation object\n      jp.apply(\n        trainingInCreation,\n        `$..group[?(@.id == '${intervalToEdit.id}')]`,\n        value => ({\n          id: intervalToEdit.id,\n          description,\n          duration\n        })\n      );\n      saveTrainingInCreation({ ...trainingInCreation });\n      setDuration(null);\n      setDescription(\"\");\n      handleCloseModal();\n    }\n  };\n\n  const onCancel = () => {\n    setDescription(\"\");\n    setDuration(null);\n    handleCloseModal();\n  };\n\n  return (\n    <Dialog open={isModalOpened} onClose={handleCloseModal}>\n      <DialogTitle>Interval edition</DialogTitle>\n      <DialogContent>\n        <div className={classes.modalContent}>\n          <DialogContentText className={classes.descriptionTitle}>\n            Interval description\n          </DialogContentText>\n          <TextField\n            variant=\"filled\"\n            label=\"Description\"\n            color=\"secondary\"\n            value={description}\n            onChange={onDescriptionChange}\n            error={isDescriptionInError}\n            helperText={\n              isDescriptionInError\n                ? \"Cannot be empty and must be less than 100 characters.\"\n                : null\n            }\n          />\n\n          <DialogContentText className={classes.durationTitle}>\n            Interval duration\n          </DialogContentText>\n          {isDurationInError && (\n            <p className={classes.durationError}>Cannot be empty.</p>\n          )}\n          <DurationPicker\n            onChange={onDurationChange}\n            initialDuration={\n              intervalToEdit && intervalToEdit.duration\n                ? intervalToEdit.duration\n                : { hours: 0, minutes: 0, seconds: 0 }\n            }\n            maxHours={4}\n          />\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onCancel}>Cancel</Button>\n        <Button onClick={onValidateInterval} color=\"secondary\">\n          Update\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst mapStateToProps = state => ({\n  intervalToEdit: state.trainingReducer.intervalToEdit,\n  trainingInCreation: state.trainingReducer.trainingInCreation\n});\n\nconst mapDispatchToProps = dispatch => ({\n  saveTrainingInCreation: training =>\n    dispatch(saveTrainingInCreationAction(training))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(IntervalEditionModal);\n"],"sourceRoot":""}