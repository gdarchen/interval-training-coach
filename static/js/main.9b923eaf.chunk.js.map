{"version":3,"sources":["resources/images/profile.png","common/app-shell/AppShell.jsx","common/credits/Credits.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","title","textAlign","link","color","textDecoration","AppShell","classes","AppBar","position","Toolbar","Typography","variant","className","to","Button","maxWidth","margin","marginTop","media","height","actions","paddingLeft","paddingRight","networks","width","Credits","Card","CardMedia","image","ProfilePic","CardContent","gutterBottom","component","CardActions","List","ListItem","button","href","ListItemAvatar","Avatar","ListItemText","primary","offset","mixins","toolbar","App","classNames","path","onClick","msg","SpeechSynthesisUtterance","text","volume","voice","speechSynthesis","getVoices","filter","name","speak","console","log","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9b923eaf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.7fc97f05.png\";","import AppBar from \"@material-ui/core/AppBar\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    flexGrow: 1,\n    textAlign: \"left\"\n  },\n  link: {\n    color: \"unset\",\n    textDecoration: \"unset\"\n  }\n}));\n\nconst AppShell = () => {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"sticky\">\n      <Toolbar>\n        <Typography variant=\"h6\" className={classes.title}>\n          <Link to=\"/\" className={classes.link}>\n            Interval training coach\n          </Link>\n        </Typography>\n\n        <Button color=\"inherit\">\n          <Link to=\"/credits\" className={classes.link}>\n            Credits\n          </Link>\n        </Button>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default AppShell;\n","import Avatar from \"@material-ui/core/Avatar\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\nimport React from \"react\";\nimport ProfilePic from \"../../resources/images/profile.png\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n    margin: \"auto\",\n    marginTop: \"15%\",\n    textAlign: \"left\"\n  },\n  media: {\n    height: 300\n  },\n  actions: {\n    paddingLeft: 0,\n    paddingRight: 0\n  },\n  networks: {\n    width: \"100%\"\n  }\n});\n\nconst Credits = () => {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardMedia className={classes.media} image={ProfilePic} title=\"profile\" />\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          Gautier DARCHEN\n        </Typography>\n      </CardContent>\n      <CardActions className={classes.actions}>\n        <List className={classes.networks}>\n          <ListItem component=\"a\" button href=\"https://twitter.com/GDarchen\">\n            <ListItemAvatar>\n              <Avatar>\n                <TwitterIcon />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary=\"@GDarchen\" />\n          </ListItem>\n\n          <ListItem component=\"a\" button href=\"https://github.com/gdarchen\">\n            <ListItemAvatar>\n              <Avatar>\n                <GitHubIcon />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary=\"gdarchen\" />\n          </ListItem>\n\n          <ListItem\n            component=\"a\"\n            button\n            href=\"https://www.linkedin.com/in/gautierdarchen/\"\n          >\n            <ListItemAvatar>\n              <Avatar>\n                <LinkedInIcon />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary=\"gautierdarchen\" />\n          </ListItem>\n        </List>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Credits;\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport AppShell from \"./common/app-shell/AppShell\";\nimport Credits from \"./common/credits/Credits\";\nimport classNames from \"classnames\";\n\nconst useStyles = makeStyles(theme => ({\n  offset: theme.mixins.toolbar\n}));\n\nconst App = () => {\n  const classes = useStyles();\n\n  const speak = () => {\n    const msg = new SpeechSynthesisUtterance();\n    msg.text = \"Welcome to my first Progressive Web App!\";\n    msg.volume = 0.1;\n    msg.voice = speechSynthesis\n      .getVoices()\n      .filter(voice => voice.name === \"Thomas\")[0];\n    speechSynthesis.speak(msg);\n    console.log(msg);\n  };\n\n  return (\n    <Router>\n      <AppShell />\n\n      <div className={classNames(classes.offset, \"App\")}>\n        <Switch>\n          <Route path=\"/credits\">\n            <Credits />\n          </Route>\n          <Route path=\"/\">\n            <button onClick={speak}>Speech-to-text</button>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}