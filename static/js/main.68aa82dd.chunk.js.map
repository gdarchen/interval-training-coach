{"version":3,"sources":["common/duration-picker-modal/DurationPickerModal.jsx","utils/durationUtils.js","common/intervals-list/IntervalListItem.jsx","common/intervals-list/IntervalOccurence.jsx","utils/textToSpeechUtils.js","common/intervals-list/IntervalList.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","modalContent","display","justifyContent","alignItems","DurationPickerModal","isModalOpened","handleCloseModal","classes","useState","duration","setDuration","console","log","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","className","onChange","d","initialDuration","hours","minutes","seconds","maxHours","DialogActions","Button","onClick","color","formatDuration","addZeroIfNeeded","timeUnit","root","minWidth","IntervalListItem","formattedDuration","description","Card","CardContent","Typography","variant","component","content","padding","height","occurences","marginLeft","IntervalOccurences","speak","message","msg","SpeechSynthesisUtterance","text","volume","voice","speechSynthesis","getVoices","filter","name","periods","group","list","marginTop","paddedListItem","marginBottom","listItem","flexDirection","interval","cursor","occurencesListItem","paddingTop","paddingBottom","IntervalList","map","period","index","List","key","JSON","stringify","ListItem","classNames","formatIntervalToSpeechText","IntervalOccurence","AppShell","React","lazy","Credits","theme","offset","mixins","toolbar","App","setIsModalOpened","basename","fallback","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.68aa82dd.chunk.js","sourcesContent":["import Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React, { useState } from \"react\";\nimport DurationPicker from \"react-duration-picker\";\n\nconst useStyles = makeStyles(() => ({\n  modalContent: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n}));\n\nconst DurationPickerModal = ({ isModalOpened, handleCloseModal }) => {\n  const classes = useStyles();\n  const [duration, setDuration] = useState();\n\n  const onChange = d => {\n    setDuration(d);\n  };\n\n  console.log(duration);\n\n  return (\n    <Dialog open={isModalOpened} onClose={handleCloseModal}>\n      <DialogTitle>Interval duration</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Please select an interval duration\n        </DialogContentText>\n        <div className={classes.modalContent}>\n          <DurationPicker\n            onChange={onChange}\n            initialDuration={{ hours: 0, minutes: 0, seconds: 0 }}\n            maxHours={4}\n          />\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleCloseModal} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={handleCloseModal} color=\"primary\">\n          Subscribe\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default DurationPickerModal;\n","function formatDuration(duration) {\n  const { hours, minutes, seconds } = duration;\n\n  if (seconds !== 0) {\n    return `${hours}h ${addZeroIfNeeded(minutes)}m ${addZeroIfNeeded(\n      seconds\n    )}s`;\n  }\n\n  return `${hours}h${addZeroIfNeeded(minutes)}`;\n}\n\nfunction addZeroIfNeeded(timeUnit) {\n  return timeUnit < 10 ? `0${timeUnit}` : `${timeUnit}`;\n}\n\nexport { formatDuration };\n","import Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 400\n  }\n});\n\nconst IntervalListItem = ({ formattedDuration, description }) => {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography variant=\"h6\" component=\"h2\">\n          {description}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          {formattedDuration}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default IntervalListItem;\n","import Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 100\n  },\n  content: {\n    padding: \"unset !important\",\n    height: 45,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  occurences: {\n    marginLeft: 10,\n    color: \"red\"\n  }\n});\n\nconst IntervalOccurences = ({ occurences }) => {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardContent className={classes.content}>\n        <Typography variant=\"subtitle1\" component=\"p\">\n          Répéter\n          <span className={classes.occurences}>&#10005; {occurences}</span>\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default IntervalOccurences;\n","const speak = message => {\n  const msg = new SpeechSynthesisUtterance();\n  msg.text = message;\n  msg.volume = 1;\n  msg.voice = speechSynthesis\n    .getVoices()\n    .filter(voice => voice.name === \"Thomas\")[0];\n  speechSynthesis.speak(msg);\n};\n\nconst formatIntervalToSpeechText = interval => {\n  const { hours, minutes, seconds } = interval.duration;\n\n  if (hours > 0) {\n    if (seconds !== 0) {\n      return `${interval.description} pendant ${hours} heures ${minutes} minutes et ${seconds} secondes`;\n    }\n    return `${interval.description} pendant ${hours} heures et ${minutes} minutes`;\n  }\n\n  return `${interval.description} pendant ${minutes} minutes`;\n};\n\nexport { speak, formatIntervalToSpeechText };\n","import List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport { formatDuration } from \"../../utils/durationUtils\";\nimport IntervalListItem from \"./IntervalListItem\";\nimport IntervalOccurences from \"./IntervalOccurence\";\nimport classNames from \"classnames\";\nimport {\n  speak,\n  formatIntervalToSpeechText\n} from \"../../utils/textToSpeechUtils\";\n\nconst periods = [\n  {\n    group: [\n      {\n        duration: { hours: 0, minutes: 20, seconds: 0 },\n        description: \"Endurance fondamentale\"\n      }\n    ],\n    occurences: 1\n  },\n  {\n    group: [\n      {\n        duration: { hours: 0, minutes: 30, seconds: 0 },\n        description: \"Allure semi-marathon\"\n      },\n      {\n        duration: { hours: 0, minutes: 2, seconds: 0 },\n        description: \"Endurance fondamentale\"\n      }\n    ],\n    occurences: 2\n  }\n];\n\nconst useStyles = makeStyles({\n  list: {\n    marginTop: \"20px\"\n  },\n  paddedListItem: {\n    \"& > *:not(:last-child)\": {\n      marginBottom: \"2px\"\n    }\n  },\n  listItem: {\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  interval: {\n    cursor: \"pointer\"\n  },\n  occurencesListItem: {\n    paddingTop: 0,\n    paddingBottom: 0\n  }\n});\n\nconst IntervalList = () => {\n  const classes = useStyles();\n\n  return (\n    <div>\n      {periods.map((period, index) => {\n        return (\n          <List\n            key={`${index}-${JSON.stringify(period.group)}-${JSON.stringify(\n              period.occurences\n            )}`}\n            className={classes.list}\n          >\n            <ListItem\n              className={classNames(classes.listItem, classes.paddedListItem)}\n            >\n              {period.group &&\n                period.group.map((interval, index) => {\n                  return (\n                    <div\n                      className={classes.interval}\n                      onClick={() =>\n                        speak(formatIntervalToSpeechText(interval))\n                      }\n                      key={`${index}-${JSON.stringify(\n                        interval\n                      )}-${JSON.stringify(interval.occurences)}`}\n                    >\n                      <IntervalListItem\n                        formattedDuration={formatDuration(interval.duration)}\n                        description={interval.description}\n                      />\n                    </div>\n                  );\n                })}\n            </ListItem>\n            {period.occurences > 1 && (\n              <ListItem\n                className={classNames(\n                  classes.listItem,\n                  classes.occurencesListItem\n                )}\n              >\n                <IntervalOccurences occurences={period.occurences} />\n              </ListItem>\n            )}\n          </List>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default IntervalList;\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport React, { Suspense, useState } from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport DurationPickerModal from \"./common/duration-picker-modal/DurationPickerModal\";\nimport IntervalList from \"./common/intervals-list/IntervalList\";\nimport { speak } from \"./utils/textToSpeechUtils\";\n\nconst AppShell = React.lazy(() => import(\"./common/app-shell/AppShell\"));\nconst Credits = React.lazy(() => import(\"./common/credits/Credits\"));\n\nconst useStyles = makeStyles(theme => ({\n  offset: theme.mixins.toolbar\n}));\n\nconst App = () => {\n  const classes = useStyles();\n  const [isModalOpened, setIsModalOpened] = useState(false);\n\n  const handleCloseModal = () => {\n    setIsModalOpened(false);\n  };\n\n  const handleOpenModal = () => {\n    setIsModalOpened(true);\n  };\n\n  return (\n    <Router basename=\"/\">\n      <Suspense fallback={<div>Loading...</div>}>\n        <AppShell />\n\n        <div className={classNames(classes.offset, \"App\")}>\n          <Switch>\n            <Route path=\"/credits\">\n              <Credits />\n            </Route>\n            <Route path=\"/\">\n              <button onClick={speak}>Speech-to-text</button>\n\n              <button onClick={handleOpenModal}>Open modal</button>\n              <DurationPickerModal\n                isModalOpened={isModalOpened}\n                handleCloseModal={handleCloseModal}\n              />\n\n              <IntervalList />\n            </Route>\n          </Switch>\n        </div>\n      </Suspense>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}