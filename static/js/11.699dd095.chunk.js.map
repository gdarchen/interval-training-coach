{"version":3,"sources":["utils/durationUtils.js","common/intervals-list/IntervalListItem.jsx","common/intervals-list/IntervalOccurence.jsx","common/intervals-list/IntervalList.jsx","common/training-selector/TrainingSelector.jsx","pages/home/Home.jsx","utils/textToSpeechUtils.js"],"names":["formatDuration","duration","hours","minutes","seconds","addZeroIfNeeded","timeUnit","useStyles","makeStyles","root","minWidth","deleteIntervalButton","marginLeft","connect","dispatch","deleteInterval","intervalId","deleteIntervalAction","formattedDuration","description","isEditMode","classes","Card","className","CardContent","Typography","variant","component","CardActions","disableSpacing","Tooltip","title","arrow","IconButton","aria-label","color","size","onClick","e","stopPropagation","onDeleteClick","content","padding","height","display","alignItems","justifyContent","occurences","IntervalOccurences","intervalListContainer","flexDirection","period","list","paddingTop","paddedListItem","marginBottom","listItem","interval","cursor","occurencesListItem","paddingBottom","saveIntervalToEdit","saveIntervalToEditAction","saveTrainingInCreation","training","saveTrainingInCreationAction","DragHandle","SortableHandle","Period","index","key","JSON","stringify","group","List","ListItem","classNames","map","speak","formatIntervalToSpeechText","id","IntervalOccurence","SortablePeriod","SortableElement","IntervalList","periods","PeriodToRender","SortableIntervalList","SortableContainer","onSortEnd","oldIndex","newIndex","reorderedTraining","arrayMove","console","log","useDragHandle","theme","marginTop","autocomplete","palette","primary","main","secondary","light","borderColor","state","trainings","trainingReducer","onTrainingSelection","selectedTraining","length","Autocomplete","options","getOptionLabel","option","name","getOptionSelected","onChange","style","width","value","renderInput","params","TextField","label","speedDial","position","bottom","spacing","right","saveSelectedTraining","saveSelectedTrainingAction","deleteTraining","trainingId","deleteTrainingAction","history","useHistory","actions","icon","push","pathname","trainingToEdit","useState","isDialOpened","setIsDialOpened","event","SpeedDial","ariaLabel","SpeedDialIcon","onClose","onOpen","open","direction","action","SpeedDialAction","tooltipTitle","message","msg","SpeechSynthesisUtterance","text","volume","voice","speechSynthesis","getVoices","filter"],"mappings":"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","file":"static/js/11.699dd095.chunk.js","sourcesContent":["function formatDuration(duration) {\n  const { hours, minutes, seconds } = duration;\n\n  if (seconds !== 0) {\n    return `${hours}h ${addZeroIfNeeded(minutes)}m ${addZeroIfNeeded(\n      seconds\n    )}s`;\n  }\n\n  return `${hours}h${addZeroIfNeeded(minutes)}`;\n}\n\nfunction addZeroIfNeeded(timeUnit) {\n  return timeUnit < 10 ? `0${timeUnit}` : `${timeUnit}`;\n}\n\nexport { formatDuration };\n","import Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport { Tooltip } from \"@material-ui/core\";\nimport { deleteIntervalAction } from \"../../redux/actions/trainingActions\";\nimport { connect } from \"react-redux\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 400\n  },\n  deleteIntervalButton: {\n    marginLeft: \"auto\"\n  }\n});\n\nconst IntervalListItem = ({\n  intervalId,\n  formattedDuration,\n  description,\n  isEditMode,\n  deleteInterval\n}) => {\n  const classes = useStyles();\n\n  const onDeleteClick = e => {\n    e.stopPropagation();\n    deleteInterval(intervalId);\n  };\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography variant=\"h6\" component=\"h2\">\n          {description}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          {formattedDuration}\n        </Typography>\n      </CardContent>\n\n      {isEditMode && (\n        <CardActions disableSpacing>\n          <Tooltip title=\"Edit interval\" arrow>\n            <IconButton\n              aria-label=\"edit interval\"\n              color=\"secondary\"\n              size=\"small\"\n            >\n              <EditIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Delete interval\" arrow>\n            <IconButton\n              aria-label=\"delete interval\"\n              color=\"secondary\"\n              size=\"small\"\n              className={classes.deleteIntervalButton}\n              onClick={e => onDeleteClick(e)}\n            >\n              <DeleteIcon />\n            </IconButton>\n          </Tooltip>\n        </CardActions>\n      )}\n    </Card>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  deleteInterval: intervalId => dispatch(deleteIntervalAction(intervalId))\n});\n\nexport default connect(null, mapDispatchToProps)(IntervalListItem);\n","import Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 100\n  },\n  content: {\n    padding: \"unset !important\",\n    height: 45,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  occurences: {\n    marginLeft: 10,\n    color: \"red\"\n  }\n});\n\nconst IntervalOccurences = ({ occurences }) => {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardContent className={classes.content}>\n        <Typography variant=\"subtitle1\" component=\"p\">\n          Répéter\n          <span className={classes.occurences}>&#10005; {occurences}</span>\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default IntervalOccurences;\n","import List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport arrayMove from \"array-move\";\nimport ReorderIcon from \"@material-ui/icons/Reorder\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  SortableContainer,\n  SortableElement,\n  SortableHandle,\n} from \"react-sortable-hoc\";\nimport {\n  saveIntervalToEditAction,\n  saveTrainingInCreationAction,\n} from \"../../redux/actions/trainingActions\";\nimport { formatDuration } from \"../../utils/durationUtils\";\nimport {\n  formatIntervalToSpeechText,\n  speak,\n} from \"../../utils/textToSpeechUtils\";\nimport IntervalListItem from \"./IntervalListItem\";\nimport IntervalOccurences from \"./IntervalOccurence\";\n\nconst useStyles = makeStyles({\n  intervalListContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n  },\n  period: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"row\",\n    color: \"white\",\n  },\n  list: {\n    paddingTop: \"20px\",\n  },\n  paddedListItem: {\n    \"& > *:not(:last-child)\": {\n      marginBottom: \"2px\",\n    },\n  },\n  listItem: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  interval: {\n    cursor: \"pointer\",\n  },\n  occurencesListItem: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n});\n\nconst IntervalList = ({\n  training,\n  isEditMode,\n  saveIntervalToEdit,\n  saveTrainingInCreation,\n}) => {\n  const classes = useStyles();\n\n  if (!training) {\n    return null;\n  }\n\n  const DragHandle = SortableHandle(() => <ReorderIcon />);\n\n  const Period = ({ period, index }) => (\n    <div\n      key={`${index}-${JSON.stringify(period.group)}-${JSON.stringify(\n        period.occurences\n      )}`}\n      className={classes.period}\n    >\n      {isEditMode && <DragHandle />}\n      <List className={classes.list}>\n        <ListItem\n          className={classNames(classes.listItem, classes.paddedListItem)}\n        >\n          {period.group &&\n            period.group.map((interval, index) => {\n              return (\n                <div\n                  className={classes.interval}\n                  onClick={() =>\n                    isEditMode\n                      ? saveIntervalToEdit(interval)\n                      : speak(formatIntervalToSpeechText(interval))\n                  }\n                  key={`${index}-${JSON.stringify(interval)}-${JSON.stringify(\n                    interval.occurences\n                  )}`}\n                >\n                  <IntervalListItem\n                    intervalId={interval.id}\n                    formattedDuration={\n                      interval.duration\n                        ? formatDuration(interval.duration)\n                        : null\n                    }\n                    description={interval.description}\n                    isEditMode={isEditMode}\n                  />\n                </div>\n              );\n            })}\n        </ListItem>\n        {period.occurences > 1 && (\n          <ListItem\n            className={classNames(classes.listItem, classes.occurencesListItem)}\n          >\n            <IntervalOccurences occurences={period.occurences} />\n          </ListItem>\n        )}\n      </List>\n    </div>\n  );\n\n  const SortablePeriod = SortableElement(Period);\n\n  const IntervalList = () => (\n    <div>\n      {training &&\n        training.periods &&\n        training.periods.map((period, index) => {\n          const PeriodToRender = isEditMode ? SortablePeriod : Period;\n          return (\n            <PeriodToRender\n              key={`sortable-item-${index}-${JSON.stringify(\n                period.group\n              )}-${JSON.stringify(period.occurences)}`}\n              period={period}\n              index={index}\n            />\n          );\n        })}\n    </div>\n  );\n\n  const SortableIntervalList = SortableContainer(IntervalList);\n\n  const reorderPeriods = ({ oldIndex, newIndex }) => {\n    const reorderedTraining = arrayMove(training.periods, oldIndex, newIndex);\n    saveTrainingInCreation({ ...training, periods: reorderedTraining });\n    console.log(oldIndex, newIndex);\n  };\n\n  return (\n    <div className={classes.intervalListContainer}>\n      {isEditMode ? (\n        <SortableIntervalList onSortEnd={reorderPeriods} useDragHandle />\n      ) : (\n        <IntervalList />\n      )}\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveIntervalToEdit: (interval) =>\n    dispatch(saveIntervalToEditAction(interval)),\n  saveTrainingInCreation: (training) =>\n    dispatch(saveTrainingInCreationAction(training)),\n});\n\nexport default connect(null, mapDispatchToProps)(IntervalList);\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { connect } from \"react-redux\";\n\nconst useStyles = makeStyles(theme => {\n  return {\n    root: {\n      marginTop: \"20px\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    autocomplete: {\n      // width: 'unset !important',\n      // maxWidth: '300px',\n      \"& .MuiAutocomplete-clearIndicator > span.MuiIconButton-label\": {\n        color: theme.palette.primary.main\n      },\n      \"& label, & .MuiAutocomplete-popupIndicator\": {\n        color: theme.palette.secondary.light\n      },\n      \"& .MuiOutlinedInput-root:not(.Mui-focused) .MuiOutlinedInput-notchedOutline, & .MuiInoutBase-root:hover\": {\n        borderColor: theme.palette.secondary.light\n      },\n      \"& .MuiAutocomplete-popupIndicatorOpen, & input\": {\n        color: theme.palette.primary.main\n      }\n    }\n  };\n});\n\nconst TrainingSelector = ({\n  trainings,\n  onTrainingSelection,\n  selectedTraining\n}) => {\n  const classes = useStyles();\n\n  if (!trainings || !trainings.length) {\n    return null;\n  }\n\n  return (\n    <div className={classes.root}>\n      <Autocomplete\n        options={trainings}\n        className={classes.autocomplete}\n        getOptionLabel={option => option.name}\n        getOptionSelected={option => option.name === selectedTraining.name}\n        onChange={onTrainingSelection}\n        style={{ width: 300 }}\n        value={selectedTraining || null}\n        renderInput={params => (\n          <TextField {...params} label=\"Select a training\" variant=\"outlined\" />\n        )}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  trainings: state.trainingReducer.trainings\n});\n\nexport default connect(mapStateToProps)(TrainingSelector);\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport SpeedDial from \"@material-ui/lab/SpeedDial\";\nimport SpeedDialAction from \"@material-ui/lab/SpeedDialAction\";\nimport SpeedDialIcon from \"@material-ui/lab/SpeedDialIcon\";\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport IntervalList from \"../../common/intervals-list/IntervalList\";\nimport TrainingSelector from \"../../common/training-selector/TrainingSelector\";\nimport {\n  saveSelectedTrainingAction,\n  deleteTrainingAction,\n} from \"../../redux/actions/trainingActions\";\nimport { speak } from \"../../utils/textToSpeechUtils\";\n\nconst useStyles = makeStyles((theme) => ({\n  speedDial: {\n    position: \"absolute\",\n    \"&.MuiSpeedDial-directionUp\": {\n      bottom: theme.spacing(2),\n      right: theme.spacing(2),\n    },\n  },\n}));\n\nconst Home = ({\n  selectedTraining,\n  trainings,\n  saveSelectedTraining,\n  deleteTraining,\n}) => {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const actions = [\n    {\n      icon: <AddCircleIcon />,\n      name: \"Create a training\",\n      onClick: () => history.push(\"/training-creation\"),\n    },\n    ...(selectedTraining\n      ? [\n          {\n            icon: <EditIcon />,\n            name: \"Edit this training\",\n            onClick: () =>\n              history.push({\n                pathname: \"/training-edition\",\n                state: {\n                  trainingToEdit: selectedTraining,\n                },\n              }),\n          },\n        ]\n      : []),\n    ...(selectedTraining && trainings && trainings.length > 1\n      ? [\n          {\n            icon: <DeleteIcon />,\n            name: \"Delete this training\",\n            onClick: () => {\n              deleteTraining(selectedTraining.id);\n              saveSelectedTraining(null);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const [isDialOpened, setIsDialOpened] = useState(false);\n\n  const onTrainingSelection = (event, value) => {\n    saveSelectedTraining(value);\n  };\n\n  const onDialOpen = () => {\n    setIsDialOpened(true);\n  };\n\n  const onDialClose = () => {\n    setIsDialOpened(false);\n  };\n\n  return (\n    <>\n      <TrainingSelector\n        onTrainingSelection={onTrainingSelection}\n        selectedTraining={selectedTraining}\n      />\n\n      <IntervalList training={selectedTraining} />\n\n      <SpeedDial\n        ariaLabel=\"speed-dial-main-actions\"\n        className={classes.speedDial}\n        icon={<SpeedDialIcon />}\n        onClose={onDialClose}\n        onOpen={onDialOpen}\n        open={isDialOpened}\n        direction=\"up\"\n      >\n        {actions.map((action) => (\n          <SpeedDialAction\n            key={action.name}\n            icon={action.icon}\n            tooltipTitle={action.name}\n            onClick={action.onClick}\n          />\n        ))}\n      </SpeedDial>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  selectedTraining: state.trainingReducer.selectedTraining,\n  trainings: state.trainingReducer.trainings,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveSelectedTraining: (training) =>\n    dispatch(saveSelectedTrainingAction(training)),\n  deleteTraining: (trainingId) => dispatch(deleteTrainingAction(trainingId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","const speak = message => {\n  const msg = new SpeechSynthesisUtterance();\n  msg.text = message;\n  msg.volume = 1;\n  msg.voice = speechSynthesis\n    .getVoices()\n    .filter(voice => voice.name === \"Thomas\")[0];\n  speechSynthesis.speak(msg);\n};\n\nconst formatIntervalToSpeechText = interval => {\n  const { hours, minutes, seconds } = interval.duration;\n\n  if (hours > 0) {\n    if (seconds !== 0) {\n      return `${interval.description} pendant ${hours} heures ${minutes} minutes et ${seconds} secondes`;\n    }\n    return `${interval.description} pendant ${hours} heures et ${minutes} minutes`;\n  }\n\n  return `${interval.description} pendant ${minutes} minutes`;\n};\n\nexport { speak, formatIntervalToSpeechText };\n"],"sourceRoot":""}